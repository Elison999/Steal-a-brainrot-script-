-- Advanced Movement Hacks Script with Rayfield UI
-- Developed with advanced features and error handling

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

local Player = Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local RootPart = Character:WaitForChild("HumanoidRootPart")

-- Variables
local floatConnection, seatConnection, noclipConnection, platformConnection
local floatButton, seatButton, saveButton, tpButton
local savedPosition = nil
local seatPart = nil
local noclipPlatform = nil
local originalPosition = nil

-- Button Creation Helper
local function createFloatingButton(text, position, callback)
    local screenGui = Instance.new("ScreenGui")
    local button = Instance.new("TextButton")
    
    screenGui.Name = "FloatingButton"
    screenGui.Parent = game.CoreGui
    screenGui.ResetOnSpawn = false
    
    button.Name = text
    button.Size = UDim2.new(0, 80, 0, 40)
    button.Position = position
    button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    button.BorderSizePixel = 0
    button.Text = text
    button.TextColor3 = Color3.white
    button.TextScaled = true
    button.Font = Enum.Font.GothamBold
    button.Parent = screenGui
    
    -- Rounded corners
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = button
    
    -- Dragging functionality
    local dragging = false
    local dragStart = nil
    local startPos = nil
    
    button.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = button.Position
        end
    end)
    
    button.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            button.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, 
                                       startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    
    button.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    button.MouseButton1Click:Connect(callback)
    return screenGui
end

-- Movement Control Buttons
local function createMovementButtons()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "MovementControls"
    screenGui.Parent = game.CoreGui
    screenGui.ResetOnSpawn = false
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 120, 0, 120)
    frame.Position = UDim2.new(0.5, -60, 0.5, -60)
    frame.BackgroundTransparency = 0.3
    frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    frame.Parent = screenGui
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 10)
    corner.Parent = frame
    
    local buttons = {
        {text = "↑", pos = UDim2.new(0.5, -15, 0, 5), dir = Vector3.new(0, 0, -1)},
        {text = "↓", pos = UDim2.new(0.5, -15, 1, -35), dir = Vector3.new(0, 0, 1)},
        {text = "←", pos = UDim2.new(0, 5, 0.5, -15), dir = Vector3.new(-1, 0, 0)},
        {text = "→", pos = UDim2.new(1, -35, 0.5, -15), dir = Vector3.new(1, 0, 0)}
    }
    
    for _, btnData in pairs(buttons) do
        local btn = Instance.new("TextButton")
        btn.Size = UDim2.new(0, 30, 0, 30)
        btn.Position = btnData.pos
        btn.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        btn.Text = btnData.text
        btn.TextColor3 = Color3.white
        btn.TextScaled = true
        btn.Font = Enum.Font.GothamBold
        btn.Parent = frame
        
        local btnCorner = Instance.new("UICorner")
        btnCorner.CornerRadius = UDim.new(0, 5)
        btnCorner.Parent = btn
        
        btn.MouseButton1Click:Connect(function()
            if seatPart then
                seatPart.CFrame = seatPart.CFrame + btnData.dir * 3
            end
        end)
    end
    
    return screenGui
end

-- Float System
local function startFloat()
    if floatConnection then return end
    
    local bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.MaxForce = Vector3.new(4000, 4000, 4000)
    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
    bodyVelocity.Parent = RootPart
    
    floatConnection = RunService.Heartbeat:Connect(function()
        if not RootPart or not RootPart.Parent then
            floatConnection:Disconnect()
            floatConnection = nil
            return
        end
        
        bodyVelocity.Velocity = Vector3.new(0, 16.2, 0)
    end)
end

local function stopFloat()
    if floatConnection then
        floatConnection:Disconnect()
        floatConnection = nil
    end
    
    for _, obj in pairs(RootPart:GetChildren()) do
        if obj:IsA("BodyVelocity") then
            obj:Destroy()
        end
    end
end

-- Seat System
local function createSeatPart()
    seatPart = Instance.new("Part")
    seatPart.Name = "MovingSeat"
    seatPart.Size = Vector3.new(4, 1, 4)
    seatPart.Material = Enum.Material.Neon
    seatPart.BrickColor = BrickColor.new("Bright blue")
    seatPart.Anchored = true
    seatPart.CanCollide = true
    seatPart.Shape = Enum.PartType.Cylinder
    seatPart.CFrame = RootPart.CFrame - Vector3.new(0, 3, 0)
    seatPart.Parent = workspace
    
    local seat = Instance.new("Seat")
    seat.Size = Vector3.new(2, 0.2, 2)
    seat.Material = Enum.Material.Plastic
    seat.BrickColor = BrickColor.new("Really red")
    seat.Anchored = true
    seat.CanCollide = false
    seat.CFrame = seatPart.CFrame + Vector3.new(0, 0.6, 0)
    seat.Parent = seatPart
    
    return createMovementButtons()
end

-- Position Save/Teleport System
local function savePosition()
    savedPosition = RootPart.CFrame
    game.StarterGui:SetCore("SendNotification", {
        Title = "Position Saved",
        Text = "Current position has been saved!",
        Duration = 3
    })
end

local function teleportToSaved()
    if not savedPosition then
        game.StarterGui:SetCore("SendNotification", {
            Title = "No Position",
            Text = "No saved position found!",
            Duration = 3
        })
        return
    end
    
    local tween = TweenService:Create(RootPart, 
        TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out),
        {CFrame = savedPosition}
    )
    tween:Play()
    
    game.StarterGui:SetCore("SendNotification", {
        Title = "Teleporting",
        Text = "Floating to saved position...",
        Duration = 2
    })
end

-- NoClip System with Anti-Fall Platform
local function createNoclipPlatform()
    noclipPlatform = Instance.new("Part")
    noclipPlatform.Name = "NoclipPlatform"
    noclipPlatform.Size = Vector3.new(6, 0.5, 6)
    noclipPlatform.Material = Enum.Material.ForceField
    noclipPlatform.BrickColor = BrickColor.new("Bright green")
    noclipPlatform.Anchored = true
    noclipPlatform.CanCollide = true
    noclipPlatform.Transparency = 0.7
    noclipPlatform.Parent = workspace
end

local function startNoclip()
    if noclipConnection then return end
    
    originalPosition = RootPart.CFrame
    createNoclipPlatform()
    
    noclipConnection = RunService.Stepped:Connect(function()
        if not Character or not RootPart or not noclipPlatform then return end
        
        -- Enable noclip
        for _, part in pairs(Character:GetChildren()) do
            if part:IsA("BasePart") and part ~= RootPart then
                part.CanCollide = false
            end
        end
        
        -- Platform follows player
        local raycast = workspace:Raycast(RootPart.Position, Vector3.new(0, -50, 0))
        local platformY = raycast and raycast.Position.Y or (RootPart.Position.Y - 10)
        
        noclipPlatform.CFrame = CFrame.new(RootPart.Position.X, platformY, RootPart.Position.Z)
        
        -- Anti-fall detection
        if RootPart.Position.Y < platformY - 5 then
            RootPart.CFrame = CFrame.new(RootPart.Position.X, platformY + 5, RootPart.Position.Z)
        end
    end)
end

local function stopNoclip()
    if noclipConnection then
        noclipConnection:Disconnect()
        noclipConnection = nil
    end
    
    if noclipPlatform then
        noclipPlatform:Destroy()
        noclipPlatform = nil
    end
    
    -- Restore collision
    for _, part in pairs(Character:GetChildren()) do
        if part:IsA("BasePart") then
            part.CanCollide = true
        end
    end
end

-- Cleanup Function
local function cleanup()
    stopFloat()
    stopNoclip()
    
    if seatPart then seatPart:Destroy() end
    if floatButton then floatButton:Destroy() end
    if seatButton then seatButton:Destroy() end
    if saveButton then saveButton:Destroy() end
    if tpButton then tpButton:Destroy() end
    
    for _, gui in pairs(game.CoreGui:GetChildren()) do
        if gui.Name:find("FloatingButton") or gui.Name:find("MovementControls") then
            gui:Destroy()
        end
    end
end

-- Create Rayfield Window
local Window = Rayfield:CreateWindow({
    Name = "Advanced Movement Hacks",
    LoadingTitle = "Loading Movement System...",
    LoadingSubtitle = "by Advanced Scripts",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "AdvancedMovement",
        FileName = "Config"
    }
})

-- Main Tab
local MainTab = Window:CreateTab("Main", 4483362458)

-- Float Toggle
local FloatToggle = MainTab:CreateToggle({
    Name = "Float Mode",
    CurrentValue = false,
    Flag = "FloatToggle",
    Callback = function(Value)
        if Value then
            startFloat()
            floatButton = createFloatingButton("Float", UDim2.new(0, 10, 0.5, -20), function()
                FloatToggle:Set(not FloatToggle.CurrentValue)
            end)
        else
            stopFloat()
            if floatButton then
                floatButton:Destroy()
                floatButton = nil
            end
        end
    end
})

-- Seat Toggle
local SeatToggle = MainTab:CreateToggle({
    Name = "Moving Seat",
    CurrentValue = false,
    Flag = "SeatToggle",
    Callback = function(Value)
        if Value then
            local movementGui = createSeatPart()
            seatButton = createFloatingButton("Seat", UDim2.new(0, 100, 0.5, -20), function()
                SeatToggle:Set(not SeatToggle.CurrentValue)
            end)
        else
            if seatPart then
                seatPart:Destroy()
                seatPart = nil
            end
            if seatButton then
                seatButton:Destroy()
                seatButton = nil
            end
            for _, gui in pairs(game.CoreGui:GetChildren()) do
                if gui.Name == "MovementControls" then
                    gui:Destroy()
                end
            end
        end
    end
})

-- Position Save/TP Toggle
local PositionToggle = MainTab:CreateToggle({
    Name = "Position Manager",
    CurrentValue = false,
    Flag = "PositionToggle",
    Callback = function(Value)
        if Value then
            saveButton = createFloatingButton("Save", UDim2.new(0, 10, 0.3, 0), savePosition)
            tpButton = createFloatingButton("TP", UDim2.new(0, 100, 0.3, 0), teleportToSaved)
        else
            if saveButton then
                saveButton:Destroy()
                saveButton = nil
            end
            if tpButton then
                tpButton:Destroy()
                tpButton = nil
            end
        end
    end
})

-- NoClip Toggle
local NoclipToggle = MainTab:CreateToggle({
    Name = "NoClip + Platform",
    CurrentValue = false,
    Flag = "NoclipToggle",
    Callback = function(Value)
        if Value then
            startNoclip()
        else
            stopNoclip()
        end
    end
})

-- Character respawn handling
Player.CharacterAdded:Connect(function(newCharacter)
    Character = newCharacter
    Humanoid = Character:WaitForChild("Humanoid")
    RootPart = Character:WaitForChild("HumanoidRootPart")
    
    wait(1)
    cleanup()
end)

-- Cleanup on script removal
game.Players.PlayerRemoving:Connect(function(player)
    if player == Player then
        cleanup()
    end
end)

Rayfield:Notify({
    Title = "Script Loaded",
    Content = "Advanced Movement Hacks loaded successfully!",
    Duration = 5,
    Image = 4483362458
})
