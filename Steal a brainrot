-- Sistema Completo Rayfield com Funcionalidades Avançadas
-- Carregamento da biblioteca Rayfield
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Serviços
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

-- Variáveis globais
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local RootPart = Character:WaitForChild("HumanoidRootPart")

-- Estados dos sistemas
local FloatEnabled = false
local ChairSystemEnabled = false
local PositionSystemEnabled = false
local SavedPosition = nil

-- Conexões ativas
local FloatConnection = nil
local ChairConnection = nil
local TeleportConnection = nil

-- Objetos da interface
local FloatButton = nil
local ChairButton = nil
local SaveButton = nil
local TeleportButton = nil
local ChairBlock = nil
local ChairControlsFrame = nil

-- Função para criar barra de carregamento
local function ShowLoadingBar()
    local ScreenGui = Instance.new("ScreenGui")
    local Frame = Instance.new("Frame")
    local LoadingBar = Instance.new("Frame")
    local Fill = Instance.new("Frame")
    local LoadingText = Instance.new("TextLabel")
    local Corner = Instance.new("UICorner")
    local BarCorner = Instance.new("UICorner")
    local FillCorner = Instance.new("UICorner")
    
    ScreenGui.Name = "LoadingScreen"
    ScreenGui.Parent = game.CoreGui
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    Frame.Parent = ScreenGui
    Frame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    Frame.BackgroundTransparency = 0.1
    Frame.Position = UDim2.new(0, 0, 0, 0)
    Frame.Size = UDim2.new(1, 0, 1, 0)
    
    Corner.CornerRadius = UDim.new(0, 12)
    Corner.Parent = Frame
    
    LoadingBar.Name = "LoadingBar"
    LoadingBar.Parent = Frame
    LoadingBar.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    LoadingBar.Position = UDim2.new(0.5, -200, 0.5, -15)
    LoadingBar.Size = UDim2.new(0, 400, 0, 30)
    
    BarCorner.CornerRadius = UDim.new(0, 8)
    BarCorner.Parent = LoadingBar
    
    Fill.Name = "Fill"
    Fill.Parent = LoadingBar
    Fill.BackgroundColor3 = Color3.fromRGB(100, 200, 255)
    Fill.Size = UDim2.new(0, 0, 1, 0)
    
    FillCorner.CornerRadius = UDim.new(0, 8)
    FillCorner.Parent = Fill
    
    LoadingText.Parent = Frame
    LoadingText.BackgroundTransparency = 1
    LoadingText.Position = UDim2.new(0.5, -100, 0.5, -50)
    LoadingText.Size = UDim2.new(0, 200, 0, 30)
    LoadingText.Font = Enum.Font.GothamBold
    LoadingText.Text = "Carregando Sistema..."
    LoadingText.TextColor3 = Color3.fromRGB(255, 255, 255)
    LoadingText.TextScaled = true
    
    -- Animação da barra
    local tween = TweenService:Create(Fill, TweenInfo.new(2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(1, 0, 1, 0)})
    tween:Play()
    
    tween.Completed:Connect(function()
        LoadingText.Text = "Sistema Carregado!"
        wait(0.5)
        ScreenGui:Destroy()
    end)
    
    wait(2.5)
end

-- Função para criar botão flutuante arrastável
local function CreateDraggableButton(text, color, position, callback)
    local ScreenGui = Instance.new("ScreenGui")
    local Button = Instance.new("TextButton")
    local Corner = Instance.new("UICorner")
    
    ScreenGui.Name = text .. "Gui"
    ScreenGui.Parent = game.CoreGui
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    Button.Parent = ScreenGui
    Button.BackgroundColor3 = color
    Button.Position = position
    Button.Size = UDim2.new(0, 120, 0, 40)
    Button.Font = Enum.Font.GothamBold
    Button.Text = text
    Button.TextColor3 = Color3.fromRGB(255, 255, 255)
    Button.TextScaled = true
    Button.Active = true
    Button.Draggable = true
    
    Corner.CornerRadius = UDim.new(0, 8)
    Corner.Parent = Button
    
    -- Efeito de hover
    Button.MouseEnter:Connect(function()
        TweenService:Create(Button, TweenInfo.new(0.2), {Size = UDim2.new(0, 130, 0, 45)}):Play()
    end)
    
    Button.MouseLeave:Connect(function()
        TweenService:Create(Button, TweenInfo.new(0.2), {Size = UDim2.new(0, 120, 0, 40)}):Play()
    end)
    
    Button.MouseButton1Click:Connect(callback)
    
    return ScreenGui
end

-- Sistema de flutuação
local function ToggleFloat()
    if FloatEnabled then
        FloatEnabled = false
        if FloatConnection then
            FloatConnection:Disconnect()
            FloatConnection = nil
        end
        if RootPart:FindFirstChild("BodyVelocity") then
            RootPart.BodyVelocity:Destroy()
        end
        if FloatButton then
            FloatButton.TextButton.Text = "Ativar Float"
            FloatButton.TextButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
        end
    else
        FloatEnabled = true
        local BodyVelocity = Instance.new("BodyVelocity")
        BodyVelocity.MaxForce = Vector3.new(4000, 4000, 4000)
        BodyVelocity.Velocity = Vector3.new(0, 16.2, 0)
        BodyVelocity.Parent = RootPart
        
        if FloatButton then
            FloatButton.TextButton.Text = "Desativar Float"
            FloatButton.TextButton.BackgroundColor3 = Color3.fromRGB(100, 200, 100)
        end
        
        FloatConnection = RunService.Heartbeat:Connect(function()
            if not FloatEnabled then return end
            
            local moveVector = Humanoid.MoveDirection
            if moveVector.Magnitude > 0 then
                BodyVelocity.Velocity = Vector3.new(moveVector.X * 16, 16.2, moveVector.Z * 16)
            else
                BodyVelocity.Velocity = Vector3.new(0, 16.2, 0)
            end
        end)
    end
end

-- Sistema de cadeira móvel
local function CreateChairControls()
    local ScreenGui = Instance.new("ScreenGui")
    local Frame = Instance.new("Frame")
    local Corner = Instance.new("UICorner")
    
    ScreenGui.Name = "ChairControls"
    ScreenGui.Parent = game.CoreGui
    
    Frame.Parent = ScreenGui
    Frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    Frame.BackgroundTransparency = 0.2
    Frame.Position = UDim2.new(0.5, -75, 0.8, -50)
    Frame.Size = UDim2.new(0, 150, 0, 100)
    Frame.Active = true
    Frame.Draggable = true
    
    Corner.CornerRadius = UDim.new(0, 12)
    Corner.Parent = Frame
    
    local buttons = {
        {text = "↑", pos = UDim2.new(0.5, -20, 0, 5), dir = Vector3.new(0, 0, -1)},
        {text = "←", pos = UDim2.new(0, 5, 0.5, -15), dir = Vector3.new(-1, 0, 0)},
        {text = "→", pos = UDim2.new(1, -45, 0.5, -15), dir = Vector3.new(1, 0, 0)},
        {text = "↓", pos = UDim2.new(0.5, -20, 1, -35), dir = Vector3.new(0, 0, 1)}
    }
    
    for _, buttonData in pairs(buttons) do
        local Button = Instance.new("TextButton")
        local ButtonCorner = Instance.new("UICorner")
        
        Button.Parent = Frame
        Button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        Button.Position = buttonData.pos
        Button.Size = UDim2.new(0, 40, 0, 30)
        Button.Font = Enum.Font.GothamBold
        Button.Text = buttonData.text
        Button.TextColor3 = Color3.fromRGB(255, 255, 255)
        Button.TextScaled = true
        
        ButtonCorner.CornerRadius = UDim.new(0, 6)
        ButtonCorner.Parent = Button
        
        Button.MouseButton1Click:Connect(function()
            if ChairBlock then
                local newPosition = ChairBlock.Position + (buttonData.dir * 3)
                ChairBlock.Position = newPosition
                RootPart.CFrame = CFrame.new(newPosition + Vector3.new(0, 2, 0))
            end
        end)
        
        Button.MouseEnter:Connect(function()
            Button.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
        end)
        
        Button.MouseLeave:Connect(function()
            Button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        end)
    end
    
    return ScreenGui
end

local function ToggleChairSystem()
    if ChairSystemEnabled then
        ChairSystemEnabled = false
        
        -- Remover cadeira e controles
        if ChairBlock then
            ChairBlock:Destroy()
            ChairBlock = nil
        end
        if ChairControlsFrame then
            ChairControlsFrame:Destroy()
            ChairControlsFrame = nil
        end
        if ChairButton then
            ChairButton.TextButton.Text = "Ativar Cadeira"
            ChairButton.TextButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
        end
    else
        ChairSystemEnabled = true
        
        -- Criar bloco da cadeira
        ChairBlock = Instance.new("Part")
        ChairBlock.Name = "ChairBlock"
        ChairBlock.Parent = workspace
        ChairBlock.Size = Vector3.new(4, 1, 4)
        ChairBlock.Material = Enum.Material.Neon
        ChairBlock.BrickColor = BrickColor.new("Bright blue")
        ChairBlock.Anchored = true
        ChairBlock.CanCollide = true
        ChairBlock.Position = RootPart.Position - Vector3.new(0, 3, 0)
        
        -- Sentar no bloco
        local Seat = Instance.new("Seat")
        Seat.Parent = ChairBlock
        Seat.Size = Vector3.new(4, 0.5, 4)
        Seat.Position = ChairBlock.Position + Vector3.new(0, 0.75, 0)
        Seat.Material = Enum.Material.Fabric
        Seat.BrickColor = BrickColor.new("Really red")
        Seat.Anchored = true
        
        -- Criar controles
        ChairControlsFrame = CreateChairControls()
        
        if ChairButton then
            ChairButton.TextButton.Text = "Desativar Cadeira"
            ChairButton.TextButton.BackgroundColor3 = Color3.fromRGB(200, 100, 100)
        end
        
        -- Sentar automaticamente
        wait(0.1)
        Humanoid.Sit = true
        RootPart.CFrame = CFrame.new(ChairBlock.Position + Vector3.new(0, 2, 0))
    end
end

-- Sistema de salvamento de posição
local function SavePosition()
    SavedPosition = RootPart.Position
    game.StarterGui:SetCore("SendNotification", {
        Title = "Posição Salva!";
        Text = "Posição atual foi salva com sucesso.";
        Duration = 3;
    })
end

local function TeleportToSavedPosition()
    if SavedPosition then
        local targetCFrame = CFrame.new(SavedPosition)
        
        -- Animação de teleporte suave
        local startPos = RootPart.Position
        local distance = (SavedPosition - startPos).Magnitude
        local duration = math.min(distance / 50, 3) -- Máximo 3 segundos
        
        local bodyPosition = Instance.new("BodyPosition")
        bodyPosition.MaxForce = Vector3.new(4000, 4000, 4000)
        bodyPosition.Position = SavedPosition
        bodyPosition.Parent = RootPart
        
        wait(duration)
        bodyPosition:Destroy()
        
        game.StarterGui:SetCore("SendNotification", {
            Title = "Teleporte Concluído!";
            Text = "Você foi teleportado para a posição salva.";
            Duration = 3;
        })
    else
        game.StarterGui:SetCore("SendNotification", {
            Title = "Erro!";
            Text = "Nenhuma posição foi salva ainda.";
            Duration = 3;
        })
    end
end

-- Mostrar barra de carregamento
ShowLoadingBar()

-- Criar interface Rayfield
local Window = Rayfield:CreateWindow({
    Name = "Sistema Avançado de Movimentação",
    LoadingTitle = "Carregando Sistema...",
    LoadingSubtitle = "Por favor aguarde",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "MovementSystem",
        FileName = "Config"
    },
    Discord = {
        Enabled = false,
        Invite = "",
        RememberJoins = false
    },
    KeySystem = false
})

-- Tab Principal
local MainTab = Window:CreateTab("Main", 4483362458)

-- Toggle Float
local FloatToggle = MainTab:CreateToggle({
    Name = "Sistema de Flutuação",
    CurrentValue = false,
    Flag = "FloatToggle",
    Callback = function(Value)
        if Value then
            FloatButton = CreateDraggableButton("Ativar Float", Color3.fromRGB(70, 70, 70), UDim2.new(0, 50, 0, 100), ToggleFloat)
        else
            if FloatEnabled then
                ToggleFloat() -- Desativar se estiver ativo
            end
            if FloatButton then
                FloatButton:Destroy()
                FloatButton = nil
            end
        end
    end
})

-- Toggle Chair System
local ChairToggle = MainTab:CreateToggle({
    Name = "Sistema de Cadeira Móvel",
    CurrentValue = false,
    Flag = "ChairToggle",
    Callback = function(Value)
        if Value then
            ChairButton = CreateDraggableButton("Ativar Cadeira", Color3.fromRGB(70, 70, 70), UDim2.new(0, 50, 0, 160), ToggleChairSystem)
        else
            if ChairSystemEnabled then
                ToggleChairSystem() -- Desativar se estiver ativo
            end
            if ChairButton then
                ChairButton:Destroy()
                ChairButton = nil
            end
        end
    end
})

-- Toggle Position System
local PositionToggle = MainTab:CreateToggle({
    Name = "Sistema de Salvamento de Posição",
    CurrentValue = false,
    Flag = "PositionToggle",
    Callback = function(Value)
        if Value then
            SaveButton = CreateDraggableButton("Salvar Pos", Color3.fromRGB(100, 150, 100), UDim2.new(0, 50, 0, 220), SavePosition)
            TeleportButton = CreateDraggableButton("Teleportar", Color3.fromRGB(150, 100, 150), UDim2.new(0, 180, 0, 220), TeleportToSavedPosition)
        else
            if SaveButton then
                SaveButton:Destroy()
                SaveButton = nil
            end
            if TeleportButton then
                TeleportButton:Destroy()
                TeleportButton = nil
            end
        end
    end
})

-- Seção de informações
MainTab:CreateSection("Informações do Sistema")

MainTab:CreateParagraph({
    Title = "Como usar:",
    Content = "1. Flutuação: Ative o toggle e use o botão que aparece\n2. Cadeira: Ative o toggle para criar uma cadeira controlável\n3. Posições: Salve e teleporte para posições específicas"
})

-- Notificação de inicialização
Rayfield:Notify({
    Title = "Sistema Carregado!",
    Content = "Todos os recursos foram carregados com sucesso.",
    Duration = 5,
    Image = 4483362458
})

-- Limpeza ao sair
game.Players.PlayerRemoving:Connect(function(player)
    if player == LocalPlayer then
        -- Limpar todas as conexões e objetos
        if FloatConnection then FloatConnection:Disconnect() end
        if ChairConnection then ChairConnection:Disconnect() end
        if TeleportConnection then TeleportConnection:Disconnect() end
    end
end)
